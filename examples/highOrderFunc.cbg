type Nat
const Zero : Nat 
const Succ : {Nat} -> Nat 

type Bool 
const True : Bool
const False : Bool


def pred= \(n: Nat). match n with 
  | Zero -> Zero 
  | (Succ) m -> m; 

def twice = \(A: Type0). \(f: {A} -> A). \(a: A).
  (f) (f) a 

(((twice) Nat) pred) (Succ) (Succ) (Succ) Zero
