type Nat
const Zero : Nat 
const Succ : {Nat} -> Nat 



def one = (Succ) Zero
def two = (Succ) one 
def three = (Succ) two


type List : {Type0} -> Type0 
const Nil : {(A: Type0)} -> (List) A
const Cons : {(A: Type0)} -> {A} -> {(List) A} -> (List) A

def ListN = (List) Nat
def NilN = (Nil) Nat 
def ConsN = (Cons) Nat

// need signature so that type checker can handle recursive call
// returns the nth element of a list 
sig nthEl : {(A: Type0)} -> {(List) A} -> {Nat} -> A
def nthEl =
  \(A: Type0). \(l: (List) A). \(n: Nat). match n with
    | Zero -> match l with
      | (((Cons) A) a) tail -> a; 
    | (Succ) m -> match l with 
      | (((Cons) A) a) tail -> (((nthEl) A) tail) m;;

def four = (Succ) three

// creates a list of n elements with numbers n to 1
sig nNats : {Nat} -> (List) Nat
def nNats = \(n: Nat). match n with 
  | Zero -> ((ConsN) Zero) NilN 
  | (Succ) m -> ((ConsN) n) (nNats) m;

(((nthEl) Nat) (nNats) four) Zero