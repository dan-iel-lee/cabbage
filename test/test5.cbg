type Nat
const Zero : Nat 
const Succ : {Nat} -> Nat 

type Bool 
const True : Bool
const False : Bool


type Prod : {Type0} -> {Type0} -> Type0
const MkProd : {(A: Type0)} -> {(B: Type0)} -> {A} -> {B} -> ((Prod) A) B

def one = (Succ) Zero
def two = (Succ) one 
def three = (Succ) two

def NatProd = ((MkProd) Nat) Nat

rec lessThan : {Nat} -> {Nat} -> Bool = \(x: Nat). \(y: Nat). match ((NatProd) x) y with
  | ((NatProd) Zero) b -> True 
  | ((NatProd) a) Zero -> False 
  | ((NatProd) (Succ) n) (Succ) m -> ((lessThan) n) m;

((lessThan) three) two