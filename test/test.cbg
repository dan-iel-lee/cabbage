type Nat
value Zero : Nat 
value Succ : {Nat} -> Nat 

type Bool 
value True : Bool
value False : Bool


def one = (Succ) Zero
def two = (Succ) one 
def three = (Succ) two

def minusOne= \(n: Nat). match n with 
  | Zero -> Zero 
  | (Succ) m -> m 

def minusOrPlusOne = \(b: Bool). \(n: Nat). match b with
  | True -> (Succ) n 
  | False -> (minusOne) n

((minusOrPlusOne) False) three