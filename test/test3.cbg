type Nat
const Zero : Nat 
const Succ : {Nat} -> Nat 

type Bool 
const True : Bool
const False : Bool

type Prod : {Type0} -> {Type0} -> Type0
const Mk : {(A: Type0)} -> {(B: Type0)} -> {A} -> {B} -> ((Prod) A) B


def fst1 = \(A: Type0). \(B: Type0). \(p: ((Prod) A) B). match p with
  | ((((Mk) A) B) a) b -> a;


def snd1 = \(A: Type0). \(B: Type0). \(p: ((Prod) A) B). match p with
  | ((((Mk) A) B) a) b -> b;

def Mknats = ((Mk) Nat) Nat

(((fst1) Nat) Nat) ((Mknats) Zero) (Succ) Zero