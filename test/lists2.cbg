type Nat
const Zero : Nat 
const Succ : {Nat} -> Nat 



def one = (Succ) Zero
def two = (Succ) one 
def three = (Succ) two


type List : {Type0} -> Type0 
const Nil : {(A: Type0)} -> (List) A
const Cons : {(A: Type0)} -> {A} -> {(List) A} -> (List) A

def ListN = (List) Nat
def NilN = (Nil) Nat 
def ConsN = (Cons) Nat

def head =
  \(A: Type0). \(l: (List) A). match l with
    | (Cons) a -> a;

((head) Nat) ((ConsN) Zero) NilN